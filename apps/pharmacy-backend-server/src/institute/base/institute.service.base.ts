/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Institute as PrismaInstitute } from "@prisma/client";

export class InstituteServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.InstituteCountArgs, "select">
  ): Promise<number> {
    return this.prisma.institute.count(args);
  }

  async institutes(
    args: Prisma.InstituteFindManyArgs
  ): Promise<PrismaInstitute[]> {
    return this.prisma.institute.findMany(args);
  }
  async institute(
    args: Prisma.InstituteFindUniqueArgs
  ): Promise<PrismaInstitute | null> {
    return this.prisma.institute.findUnique(args);
  }
  async createInstitute(
    args: Prisma.InstituteCreateArgs
  ): Promise<PrismaInstitute> {
    return this.prisma.institute.create(args);
  }
  async updateInstitute(
    args: Prisma.InstituteUpdateArgs
  ): Promise<PrismaInstitute> {
    return this.prisma.institute.update(args);
  }
  async deleteInstitute(
    args: Prisma.InstituteDeleteArgs
  ): Promise<PrismaInstitute> {
    return this.prisma.institute.delete(args);
  }
}
